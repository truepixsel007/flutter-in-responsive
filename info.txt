ðŸ”¹ 1. MediaQuery
      MediaQuery.of(context).size: Get screen width and height.
      MediaQuery.of(context).orientation: Detect portrait or landscape.
      Useful for calculating dynamic widths, heights, padding.

ðŸ”¹ 2. LayoutBuilder
     Provides the constraints (maxWidth, maxHeight) for responsive layout.
     Great for adapting UI to screen size inside widgets.
     LayoutBuilder(
     builder: (context, constraints) {
      if (constraints.maxWidth > 600) {
       return TabletLayout();
     } else {
       return MobileLayout();
     }
     },
    );

ðŸ”¹ 3. Flexible & Expanded
      Use inside Row or Column to share space.
      Expanded: Fills remaining space.
      Flexible: Shares space proportionally using flex.

ðŸ”¹ 4. FittedBox
      Scales and resizes child widgets to fit within its parent.
      Avoids overflow errors for text and icons.

ðŸ”¹ 5. FractionallySizedBox
      Allows widgets to size themselves as a fraction of their parent (e.g., widthFactor: 0.5 for 50%).

ðŸ”¹ 6. AspectRatio
      Maintains a consistent width-to-height ratio across screens.

ðŸ”¹ 7. Wrap and Flow
      Wrap: Wraps children into multiple rows or columns.
      Useful for responsive button grids or tag chips.

ðŸ”¹ 8. OrientationBuilder
      Builds different UIs based on portrait or landscape mode.
       OrientationBuilder(
       builder: (context, orientation) {
       return orientation == Orientation.portrait
        ? PortraitLayout()
        : LandscapeLayout();
       },
      );

ðŸ”¹ 9. Responsive Packages
     flutter_screenutil: For responsive sizing and fonts.
     responsive_framework: For breakpoints and layout scaling.
     sizer: Responsive sizing using percentage of screen.

ðŸ”¹ 10. Custom Breakpoints
      Create your own screen size ranges (mobile, tablet, desktop) and build layouts accordingly.

ðŸ”¹ 11. SafeArea
       Avoid system UI overlays (like status bar, notch) and ensure content is visible.

ðŸ”¹ 12. Responsive Images & Icons
      Use BoxFit.cover, BoxFit.contain, or MediaQuery for scaling images.
      Use SVGs for scalable icons with flutter_svg.

ðŸ”¹ 13. Responsive Text
       Use AutoSizeText or FittedBox to scale text.
       Or calculate text size based on screen width/height.

âœ… Bonus: Best Practices
         Avoid hard-coded widths and heights.
         Use padding/margins in percentage or dynamically via MediaQuery.
         Always test on multiple screen sizes (mobile, tablet, foldables, etc.).

